{{ define "/articles/getting-more-from-tab-completion.html" }}
<!doctype html>
<html lang="en">
    <head>
        {{ template "/articles/head" . }}
        <title>Getting More from Tab Completion</title>
    </head>
    <body id="test">
        {{ template "/header" . }}
        <main>
            <h1>Getting More from Tab Completion</h1>
            <p>This year I bought a used CISCO switch and router and set up a subnet for my home computers. CISCO IOS, the operating system on both the router and switch, requires you to use a custom shell which lacks many basic features. As an example, assigning arbitrary variables is <a href="https://serverfault.com/questions/606419/does-cisco-ios-support-the-use-of-variables-in-its-configuration">not possible in older versions</a>.</p>
            <p>Despite the shell's limited capabilities, its ? operator exposes a wonderful set of ergonomics I can't believe isn't standard.</p>
            <!--  Include image of the tab completion when there are maybe five or fewer commands -->
            <p>For reference, typing &quest; with no command or subcommand shows what is available alongside a short help string. Think of it as a quieter, more thoughtful tab completion.</p>

			<br>

            <h2>Why &quest; rocks and code completion is awful</h2>
            <p>Using &quest; is an active decision, you, the person actually using the software tell the shell "I am not sure what to select, please tell me what my available options are and a bit about what they do". Furthermore, there is no way in which what you've entered will actually change.</p>
            <p>The normal user experience thus sends up being something like: Start typing, pause because you can't remember if you need to use close or shut, type &quest;, read, get the result you wanted. For this reason, &quest; makes it really nice to learn about relevant new commands and review commands you've already used.</p>
            <!-- Include a gif showing tab completion -->
            <p>What surprises me is that this positive experience is very different that what I've felt when using code completion in editors. I think the main reason is that code completion, whether always-on or enabled-after-a-pause, interrupts your thinking with visual noise that is largely irrelevant. The help that appears when pressing tab or &quest;, on the other hand, is placed just above the current line, making it easy to ignore and is contextually appropriate to an environment where your cursor travels downward. Hmm... perhaps the best Unix editor really is <a href="https://en.wikipedia.org/wiki/Ed_(software)">Ed</a>.</p>

			<br>
        
            <h2>Is this possible for other command line tools&quest;</h2>
            <p>It's <a href="https://mill-build.org/blog/14-bash-zsh-completion.html">more than possible for BASH and ZSH</a> but would take a long time to setup making it infeasible for anyone who has to do work across many machines. Even setting up something like this for your twenty most used commands would require a bespoke solution (although I both welcome and hope I am wrong). CISCO can ship standardized help for all of the commands because they control what is added, we can't.</p>
            <p>What about for languages with <abbr title="Read Evaluate Print Loop">REPL</abbr> interpretors like Python or Ruby&quest; Maybe. Simply fetching the docstring in python would probably be appropriate. And, many languages use <a href="https://tiswww.cwru.edu/php/chet/readline/rltop.html">LibReadline</a>, the same library BASH uses, so extending tab completion to also provide help would be possible. From my brief study few languages or tools seem to take real advantage of this. Although, <a href="https://note.nkmk.me/en/jupyter-notebook-ipython-lsmagic/">Jupiter Notebook</a> (and by extension, I would assume, Jupiter clones for other languages) allow &quest; and &quest;&quest; for printing help and source respectively.</p>

			<br>

            <h2>What other possibilities exist</h2>
            <p>Hopefully in the future shells and other interactive environments experiment to see what other relevant information could be made available through similar shortcuts. As an example relevant to BASH, allowing control and &quest; to print to the screen the exit code of the most recent command or control and &percnt; to highlight the surrounding parenthesis when inside of a &dollar;&lpar;&rpar; style command substitution would be very useful.</p>
            <p>If anyone still reading aspires to or is currently designing an interpreted language, experiment with ways users can get additional information during active sessions. Tab completion alone just isn't cutting it.</p>
        </main>
        {{ template "/footer" . }}
    </body>
</html>
{{ end }}
