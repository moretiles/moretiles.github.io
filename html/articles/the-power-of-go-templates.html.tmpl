{{ define "/articles/the-power-of-go-templates.html" }}
<!doctype html>
<html lang="en">
    <head>
        {{ template "/articles/head" . }}
        <title>The Power of Go Templates</title>
    </head>
    <body id="test">
        {{ template "/header" . }}
        <main>

            <h1>The Power of Go Templates</h1>
            <p>Like many problems, it began with indentation.</p>
            <p>I had decided to create a static site and wanted to try out the templating system in Golang. Immediately, I hit a brick wall. How do I create my own functions to process text? The answer ended up being simple.</p>

			<br>

            <h2>Templates and the Func Map</h2>
            <p>The standard library offers templating through <a href="https://pkg.go.dev/text/template">text/template</a> with some solid features. If you're trying to do anything more complicated than directly inserting variables or including sections of other template files you'll need to create a <a href="https://pkg.go.dev/text/template#Template.Funcs">template.FuncMap</a>.</p>
            <p>In the below code I create a new function map, add a function to that map to remove leading spaces from multi-line strings, define the text of the template, and then execute.
            <pre><code class="language-go">{{ pre "articles/the-power-of-go-templates/funcmap1.go" }}</code></pre>
            <pre><code class="language-shell-session">{{ pre "articles/the-power-of-go-templates/funcmap1.out" }}</code></pre>
            <p>There is a bit of a learning curve but it works well.</p>

			<br>
        
            <h2>Using outside state</h2>
            <p>An issue I ran into while creating functions for my templates was that they depended on outside state and it would be annoying or impossible to actually pass that outside state when making a function call within the template. I first tried constructing a "god" object but realized that was inflexible, so I moved to a more functional approach.</p>
            <p>In the below code I create a function to return a new function map, add a function that behaves like the default template function however indents every line after the first n spaces, define the text of two templates, parse them, and then execute them.
            <pre><code class="language-go">{{ pre "articles/the-power-of-go-templates/funcmap2.go" }}</code></pre>
            <pre><code class="language-shell-session">{{ pre "articles/the-power-of-go-templates/funcmap2.out" }}</code></pre>

			<br>

            <p>I was surprised by how much you can do to extend Go templates and that there was little information about this online. Hope this was interesting or helped.</p>
        </main>
        {{ template "/footer" . }}
    </body>
</html>
{{ end }}
